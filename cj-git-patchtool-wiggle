#!/usr/bin/perl -w

# Fri Sep  3 14:50:55 EDT 2010
(my $email='chrjae%gmail,com')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname basedir patchfilename
 -or-
$myname basedir/patchfilename

  apply patchfile, then feed the rejects to wiggle,
  if those worked out, save the new diff into the patchfile.

  Careful:
    - runs reset --hard
    - modifies the patchfile (but that should be in Git)

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;

our $patchpath = do {
    if (@ARGV==2) {
	my($basedir,$patchfilename)=@ARGV;
	"$basedir/$patchfilename"
    } elsif (@ARGV==1) {
	$ARGV[0]
    } else {
	usage
    }
};

use Chj::xperlfunc;
use Chj::xopen 'xopen_read';
use Chj::xtmpfile;
use Chj::IO::Command;

my $oldpatch= xopen_read $patchpath;

xxsystem "git","reset","--hard";

#hm grr how again pipelines sigh whatever
my $rej= do {
    use Chj::xpipe;
    my ($r,$w)=xpipe;
    if (xfork) {
	$w->xclose;

	my @rej;
	while (<$r>) {
	    next if /^patching file /;
	    next if /^Hunk #\d+ FAILED/;
	    chomp;
	    if (/\d+ out of \d+ hunks? (?:FAILED|ignored).*saving rejects to file (.*)/) {
		my $file=$1;
		if ($file=~ s/^'//) {
		    $file=~ s/'$// or die "hmm [$file] how?";
		}
		push @rej, $file;
	    } elsif ($_ eq 'Reversed (or previously applied) patch detected!  Assume -R? [n] ') {
		print "NOTE: $_\n";
		#since i'm not sure what to do then.
	    } elsif ($_ eq 'Apply anyway? [n] ') {
		print "NOTE: $_\n";
		#grr.  why does it ask when I said -f ?
	    } elsif ($_ eq 'Skipping patch.') {
		print "NOTE: $_\n";
		#HMMMMM.
	    } elsif (/^Hunk #\d+ succeeded/) {
		# print?
		print "NOTE: $_\n";
	    } elsif (/^patch: .* malformed patch at/) {
		# handedited patch, from xemacs, hum. anyway, hope it will be fixed by wiggle.
		print "NOTE: $_\n";
		#hm. but die anyway, it seems patch does not produce an actual rej file then!
		die "cannot proceed";
	    } elsif ($_ eq '') {
		#eh.whatever
	    } else {
		die "unknown message from patch: '$_'";
	    }
	}

	$r->xclose;
	#my $code= xwait;
	xwait;
	my $code= $?; #GAH
	($code==0
	 or $code== (1<<8))
	  or do {
	      use Chj::Unix::exitcode;
	      die "patch died of a serious error, code ".exitcode($code);
	  };

	\@rej
    } else {
	$r->xclose;
	$w->xdup2(1);
	$w->xdup2(2);
	my $p= Chj::IO::Command->new_receiver("patch","--ignore-whitespace","-p1");
	$oldpatch->xsendfile_to ($p);
	$oldpatch->xclose;
	$p->xfinish;
	exit;
    }
};

print "Ok, patch possibly applied.\n";

use Chj::Util::AskYN qw(maybe_askyn);

my $nwiggles=0;
for my $rejfile (@$rej) {
    print "Calling wiggle for '$rejfile'..\n";
    # +-copy from /opt/chj/bin/wiggle¬
    my $file= $rejfile;
    $file=~ s/\.rej$//
      or die "file '$file' does not have suffix .rej";
    {
	my $porig=$file.".porig";
	if (-e $porig) {
	    unlink $porig;
	}
    }
    my $res= xsystem "wiggle", "--replace", $file,$rejfile;
    if ($res) {
	if (!maybe_askyn "wiggle exited with error code $res; continue? ") {
	    die "stopped by user request.\n";
	}
    }
    $nwiggles++;
}

print "Ok, $nwiggles wiggles.\n";


{
    # Update the patchfile:

    $oldpatch->xrewind;

    my $new= xtmpfile $patchpath;

    while (<$oldpatch>) {
        # copy the head from oldpatch
        if (/^diff --git a\//) {
            ##^this is a bit unsafe, could be part of commit message!
            ## proper check would be for "---" then emptyline then diff? or something.
            $oldpatch->xclose;

            # Copy the new diff into the new patchfile
            {
                $new->xflush; # important before sendfile
                my $d= Chj::IO::Command->new_sender ("git","diff");
                $d->xsendfile_to ($new);
                $d->xxfinish;
            }
            last;
        } else {
            $new->xprint($_);
        }
    }
    $new->xclose;
    $new->xputback;
}

print "Ok.\n";

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
