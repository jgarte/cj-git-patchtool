#!/usr/bin/perl -w

# Sat Oct 29 01:47:21 EDT 2011
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict;

our $CJ_GIT_PATCHTOOL_BASEDIR= $ENV{CJ_GIT_PATCHTOOL_BASEDIR}
  or die "must be run from cj-git-patchtool shell";

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);

our $statusfile= "$CJ_GIT_PATCHTOOL_BASEDIR/.$myname.status";

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname commit(s)

  Like cherry-pick (or actually *does* first try with cherry-pick),
  but creates a patch file with the given commit(s), moves it (them)
  to the patch dir ('$CJ_GIT_PATCHTOOL_BASEDIR'), adds and commits
  them there, then applies them with wig [if git am doesn't work].

  NOTE: when given multiple commits, be aware that the first failure
  will stop processing the remaining ones well.

  Options:
   --cont  after abort because of non-wig'eable changes, and
           handfixing the result, call pick --cont to take the diff
           between HEAD and the working dir as new patch (it will keep
           the original commit message and meta information)

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
#our $opt_dry;
our $opt_cont;
GetOptions("verbose"=> \$verbose,
           "help"=> sub{usage},
           "cont"=> \$opt_cont,
           #"dry-run"=> \$opt_dry,
           ) or exit 1;
if (@ARGV) {
    if ($opt_cont) {
        usage "either give commits, or --cont, not both"
    } else {
        # ok
    }
} else {
    usage unless $opt_cont
}

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;

use Chj::Git::Functions ":all";
use Chj::xperlfunc ":all";

sub reset_hard {
    my ($gitdir)=@_;
    xgit_do "reset","--hard"; #still assumes cwd in git repo
    $gitdir||=".git"; ##
    my $d= "$gitdir/rebase-apply";
    xxsystem "rm", "-rf", "--", $d if -e $d;
}

sub xgit_do_hack_reset;
*xgit_do_hack_reset=
  make_xgit_do_hack (sub {
                         my ($gitdir)=@_;
                         reset_hard ($gitdir);
                         git_wait_lock $gitdir;
                     });


# hm get patch file incl name, sigh, we had this once didn't we ?
# ah:
#xxsystem "g-format-patches", "--targetdir", ..., '--', @commits;
#eh but odd, now i'm going to write a --print option but git format-patch already prints it? duh.

use Chj::Xbacktick;
use Chj::Chomp;
use Chj::xtmpfile;
use Data::Dumper;
use Chj::xopen 'xopen_read';

sub savestate {
    my ($v)=@_;
    my $t= xtmpfile $statusfile;
    $t->xprint(Dumper $v);
    $t->xclose;
    $t->xputback(0644);
}

sub loadstate {
    my $t= xopen_read $statusfile;
    my $v= $t->xcontent;
    $t->xclose;
    my $r= eval ('my '.$v); ##XXX use a non code format?
    die "evaling content of '$statusfile': $@" if $@;
    $r
}


## move to a lib? (already copy from cj-git-patchtool, basically)
sub max_number_in {
    my ($glob,$bn_re)=@_;
    my $m=-1;
    for (glob $glob) {
        my $bn=basename $_;
        if ($bn=~ m/$bn_re/) {
            my $n=$1;
            if ($n > $m) {
                $m= $n
            }
        }
    }
    $m+0
      # decimal
}
##/

my $last_patchno=
  max_number_in ("max_number_in$CJ_GIT_PATCHTOOL_BASEDIR/????-*",
                 qr/^(\d{4})-/);
sub next_patchno_str {
    $last_patchno++;
    sprintf("%04d",$last_patchno)
}

# hm check whether status is clean, we've had this, too, right?
Xbacktick "git", "status";
#hmm ?


our @targets;

sub pick {
    my ($commit)=@_;
    # first try:
    my $cnt;
    if (eval {
        #xgit_do_hack_reset "cherry-pick", $commit;
        ##sgh what does xgit_do_hack_reset all do for me again?
        my $in= Chj::IO::Command->new_combinedsender("git","cherry-pick", $commit);
        $cnt=$in->xcontent;
        $in->xxfinish;
        # XXX ^ if that excepts, then  how clean up, not at all?
        1; #don't forget!!
    }) {
        # ok done
    } else {
        if ($cnt=~ /nothing to commit/) {
            # XX ^ safer check?
            warn "pick: commit seems already applied, ignoring: $commit\n";
        } else {
            reset_hard;

            # get patch file incl path:
            my $path= Chomp Xbacktick "git","format-patch", $commit."^..".$commit;
            my $fn= basename $path;
            my $no= next_patchno_str;
            $fn=~ s/^\d{4}-/$no-/;
            my $targetpath= "$CJ_GIT_PATCHTOOL_BASEDIR/$fn";
            xlinkunlink $path, $targetpath;

            push @targets, bless [$commit,$fn,$targetpath], "CHJ_pick::Target";
        }
    }
}

package CHJ_pick::Target {
    use Class::Array -fields=> -publica=> qw(commit filename path);
    end CHJ_pick::Target;
}

sub commit {
    my ($prefix, @targets)=@_;
    if (my $pid= xfork) {
        xxwaitpid $pid,0;
    } else {
        xchdir $CJ_GIT_PATCHTOOL_BASEDIR;

        xgit_do "add", map { $$_[1]} @targets;

        # usually single line, so?:
        my $msg= join ("", map {"$prefix $_\n"}
                       map { "$$_[0] = $$_[1]"} @targets);
        xgit_do "commit", "-m", $msg,
          map { $$_[1]} @targets;

        exit 0;
    }
}

sub apply {
    my ($target)=@_;
    my ($commit,$fn,$targetpath)=@$target;
    if (eval {
        xgit_do_hack_reset "am", "-3", $targetpath;
        1
    }) {
        # well, "am" succeeded, what do we want more.
    } else {
        my $e=$@;
        #if ($e=~ )
        #well, it failed, that's enough isn't it ?
        #so, try wig now,
        xxsystem "wig", $fn;
        # so, wig succeeded, commit again
        commit "wig", $target;
        # and, apply it, now that it should apply cleanly
        reset_hard;
        xgit_do_hack_reset "am", "-3" $targetpath;
    }
}

sub apply_targets {
    while (@targets) {
        # abort on first error, thus save @targets for --cont in case
        # we crash
        savestate \@targets;
        my $target= shift @targets;
        apply $target;
    }
    savestate [];
}


if ($opt_cont) {
    @targets= @{ loadstate() };
    if (@targets) {
        my $diff= Chj::IO::Command->new_sender("git","diff","HEAD");
        if (defined (my $firstline = $diff->xreadline)) {
            my $target= shift @targets;
            my $targetpath= $target->path;
            my $oldpatch= xopen_read $targetpath;
            my $newpatch= xtmpfile $targetpath;
          LOOP: {
                while (<$oldpatch>) {
                    ## the following is probably not safe (against
                    ## such string in commit msg)
                    if (m{^diff --git a/}) {
                        # finished with old stuff;
                        $newpatch->xprint($firstline);
                        ## I've got xsendfile_to but is it buffer safe?
                        while (<$diff>) {
                            $newpatch->xprint($_);
                        }
                        $oldpatch->xclose;
                        $newpatch->xclose;
                        $newpatch->xputback;
                        last LOOP;
                    } else {
                        $newpatch->xprint($_);
                    }
                }
                die "got eof without finding a diff in patch file: '$targetpath'";
            }
            savestate \@targets; #or after commit?
            commit "--cont", $target;
            reset_hard;
            apply $target;
            apply_targets;
        } else {
            # --cont but no diff
            $diff->xxfinish;
            ## hm, just continue applying targets?
            ## drop one?
            apply_targets;
        }
    } else {
        die "pick --cont: there is nothing left to do.\n";
    }
} else {
    # new run

    # generate patch files (for those where cherry-pick doesn't work
    # right away), collect in @targets
    pick $_ for @ARGV;

    # commit patch files
    commit "pick", @targets
      if @targets;

    apply_targets;
}

print "\nOk.\n";
